<?php

namespace MaxDev\Models;

use Illuminate\Database\Eloquent\Relations\BelongsToMany;
use Illuminate\Database\Eloquent\Relations\HasMany;
use Illuminate\Database\Eloquent\Relations\MorphMany;
use Illuminate\Database\Eloquent\SoftDeletes;
use Illuminate\Notifications\Notifiable;
use Laravel\Sanctum\HasApiTokens;
use Laravel\Sanctum\Sanctum;
use MaxDev\Enums\CallStatus;
use MaxDev\Enums\UserGroupType;
use MaxDev\Models\Contracts\MustVerifyMobile;
use MaxDev\Models\Scopes\PatientScope;
use MaxDev\Models\Traits\UserVerifyMobile;
use Thomasjohnkane\Snooze\Traits\SnoozeNotifiable;

/**
 * MaxDev\Models\User
 *
 * @property string $id
 * @property string $fullname
 * @property string $email
 * @property string|null $mobile
 * @property int $user_group
 * @property string $status
 * @property int $gender
 * @property \Illuminate\Support\Carbon|null $birthdate
 * @property int $marital_status
 * @property string $password
 * @property string $language
 * @property string|null $remember_token
 * @property \Illuminate\Support\Carbon|null $email_verified_at
 * @property string|null $mobile_verified_at
 * @property \Illuminate\Support\Carbon|null $created_at
 * @property \Illuminate\Support\Carbon|null $updated_at
 * @property-read \Illuminate\Database\Eloquent\Collection|\Spatie\Activitylog\Models\Activity[] $activities
 * @property-read int|null $activities_count
 * @property-read \Illuminate\Database\Eloquent\Collection|\MaxDev\Models\Address[] $addresses
 * @property-read int|null $addresses_count
 * @property-read mixed $age
 * @property-read \Illuminate\Notifications\DatabaseNotificationCollection|\Illuminate\Notifications\DatabaseNotification[] $notifications
 * @property-read int|null $notifications_count
 * @property-read \Illuminate\Database\Eloquent\Collection|\MaxDev\Models\QuestionAnswer[] $questionAnswer
 * @property-read int|null $question_answer_count
 * @property \Laravel\Sanctum\PersonalAccessToken|null $token
 * @property-read \Illuminate\Database\Eloquent\Collection|\MaxDev\Models\Visit[] $visits
 * @property-read int|null $visits_count
 * @method static \Illuminate\Database\Eloquent\Builder|BaseUser active()
 * @method static \Illuminate\Database\Eloquent\Builder|BaseUser inActive()
 * @method static \Illuminate\Database\Eloquent\Builder|Patient newModelQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|Patient newQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|Patient query()
 * @method static \Illuminate\Database\Eloquent\Builder|BaseUser status($status)
 * @method static \Illuminate\Database\Eloquent\Builder|Patient whereBirthdate($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Patient whereCreatedAt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Patient whereEmail($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Patient whereEmailVerifiedAt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Patient whereFullname($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Patient whereGender($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Patient whereId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Patient whereLanguage($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Patient whereMaritalStatus($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Patient whereMobile($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Patient whereMobileVerifiedAt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Patient wherePassword($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Patient whereRememberToken($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Patient whereStatus($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Patient whereUpdatedAt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Patient whereUserGroup($value)
 * @mixin \Eloquent
 */
class User extends BaseUser implements MustVerifyMobile
{
    use UserVerifyMobile;
    use HasApiTokens;
    use SoftDeletes;
    use Notifiable;
    use SnoozeNotifiable;

    protected $table = 'users';
    protected $dispatchesEvents = [
    ];
    protected $dates = [
        'birthdate',
    ];

    protected $attributes = [
        'user_group' => UserGroupType::User,
    ];

    protected static function booted()
    {
        parent::booted(); // TODO: Change the autogenerated stub
        // self::addGlobalScope(new PatientScope());
    }

    public function __construct(array $attributes = [])
    {
        parent::__construct($attributes);
        
    }


    public function adminGroup()
    {
        return $this->belongsTo(AdminGroup::class, 'user_group', 'user_group');
    }

    /**
     * Relationship Between Patient And Patient Files.
     * @return HasMany
     */
    public function files()
    {
        return $this->hasMany(PatientFile::class);
    }



}
